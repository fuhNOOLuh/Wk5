---
title: "Basic R and how to read in data"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

This guide is partly based on online material from Amy Willis, Kiirsti Owen and Amelia McNamara, and the book "R for Data Science" by Hadley Wickham and Garrett Grolemund. Thank you amazing R community!


### R as a calculator

In the Console window below, type: 2+2 and press Enter
Also try:

```{r}
2^5
3/10
(3+5)^2
sqrt(4)
```

Tip: To run a line (or multiple lines) of code from a script without typing them into the Console, 
select the line(s) you want to run and press Ctrl+Enter (Command+Enter on a Mac)
EDIT: THIS MEANS LINES THAT ARE IN THE SOURCE WINDOW?

### Objects

R stores data as objects. You create new objects when you assign a value to them using "<-":

```{r}
x <- 3  # Check the "Environment" window!
```

Tip: use the R studio shortcut Alt+ - (Alt and the minus sign) to easily create the assignment symbol <-

```{r}
y <- 6
x+y
f <- 10 # here I used the shortcut for the assignment symbol
f*(x+y)
```


Tip: R is case sensitive so if you've defined your object as x, it will not recognise (capital) X. 
Similarly, the function for square root is sqrt, R will give you an error if you try to use Sqrt.


### Packages

Packages extend the functionality of base R. They are distributed via CRAN: the Comprehensive R Archive Network

To install a package, use: install.packages("packagename")
You then need to load it, using library(packagename)

We will be using a collection of packages called the Tidyverse:

```{r}
library(tidyverse)
```

When you load the tidyverse, you'll see a message about conflicts. As there is an (increasingly) large number of packages in R, it is possible to have functions with the same name in more than one package. The message tells you that packages dplyr and stats both have a function called filter and the one that will be used is the one from dplyr. It is the one that was loaded last.

If you want to use a function from a particular package, you need to include packagename:: before the name of the function.

In this example, you can use stats::filter() instead of just filter() to use filter from the stats package.

```{r}
find("filter") # this shows you the packages a function belongs to, in order of priority
```

The tidyverse packages we will be using mostly in this course are readr (for reading in data), dplyr (for transforming data) and ggplot2 (for plotting). 


### Functions

When using the Tidyverse, you can call functions in two ways:

```{r}
sqrt(4) # base R

4 %>%
  sqrt  # "pipe" operator (you can read is as "and then...")
```

Tip: use the R Studio shortcut Ctrl + Sft + M to create the pipe operator %>%

Tip: If you are not sure what a function does, type ?functionname in the Console, e.g. ?sqrt


### Reading in data

Before we read in our data, let's consider where we have saved our data file. Since we want our code to be reusable (by us and other people), the last thing we want is to include the location of the file in our code, something like: 

"C:/dimitra/data/datafile.csv"

The above would only work for me, and only for the particular computer where folder "dimitra" contains a folder called "data".

To avoid these issues, we need to do two things:

1. Use R projects. (I hope you are doing that already!) Save the data and R markdown file inside the R project. Exactly where you save your code doesn't matter, you just need to note the location of your data with respect to the .Rproj file.
2. Use the R package "here". "Here" points to the location of the .Rproj file (which is the working directory for your project), so you just need to add "here" in front of the relative path to your data file.  

For example, if your data file (a comma-separated value (csv) file) was saved inside a "data" directory, you would say:

library(here)

fev_data <- read_csv(here("data/fev.csv"))


To read in a file that is saved in the same directory as the .Rproj file:

```{r}
library(here)
fev_data <- read_csv(here("inputs/fev.csv")) 
```

(Remember to install the "here" package the first time.)

--> How would you use read_csv with the pipe operator?

```{r}
# Add your code here!
read.delim(here("inputs/psa.txt")) -> psa
# Catriona suggested fev_data <- here("Inputs/fev.csv") %>% read_csv()
```

Look at the top few rows of the data:

```{r}
head(fev_data)
```

fev_data is a tibble - this is a tidyverse structure similar to a data frame (from base R) but with some differences:

- default printing is shorter
- tells you the column types (character, double, etc.)
- doesn't change the types of inputs


Tip: if your data is in a Microsoft Excel spreadsheet, you will need a different package to read it in, such as readxl. So you'll need:

install.packages("readxl")

library(readxl)

excel_data <- read_xlsx(filename, sheet = 1) #(to read the first sheet)


--> How would you read in a text file? (Check the data import cheat sheet!)
There is a text file in your dataset so you can practice: psa.txt

```{r}
# Add your code here!
# I did it earlier using read.delim
```

--> Have a look at the "Useful arguments" section of the data import cheat sheet. 
Use a few of them when you read in fev.csv and look at the data, is that what you expected?



```{r}
# Add your code here!
# trying "No Header"
read_csv(here("inputs/fev.csv"), col_names=FALSE)
# that seemed to work
# trying "Skip lines"
read_csv(here("inputs/fev.csv"), skip=3)
# oh, I thought it was going to skip line 3 but it skips the first three lines, including the header line
# that's enough for now, I'm scared of ruining it again. I'll just reinstate the normal reading in. 
read_csv(here("inputs/fev.csv"))
```
--> Apply the summary function to a tibble. What does it do?

```{r}
# Add your code here!
# was mystified by this instruction because summary hasn't been mentioned before. Googled a bit. It looks like it gives summary statistics for each column of data.
summary(fev_data)
```



### Operating on data: columns

Individual columns are identified using the $ symbol:

```{r}
# this one gives the first six values in the column (exc header)
head(fev_data$fev)
# this one gives summary stats for the column
summary(fev_data$fev)
# this one gives how many rows in the column? what if some are empty? what if some values are duplicated?
length(fev_data$fev)
```

Other useful functions for tibbles and data frames:

```{r}
# this one gives the column headings
names(fev_data)
# this one gives number of rows (exc header) and columns
dim(fev_data)
```

Other useful functions for columns:

```{r}
# these ones are self explanatory
max(fev_data$fev)
mean(fev_data$fev)
sd(fev_data$fev)
```
